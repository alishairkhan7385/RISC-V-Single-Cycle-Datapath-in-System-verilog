module alu_op(rs1_data,rs2_data,alu_op,rd_data);
	input logic [31:0] rs1_data;
	input logic [31:0] rs2_data;
	//input logic [11:0] imm;
	input logic [3:0] alu_op;
	
	output logic [31:0] rd_data;

	//logic [31:0] sign_extended;
	//logic [31:0] sign_extended_unsign;

always_comb begin
	//sign_extended = {{20{imm[11]}},imm};
	//sign_extended_unsign = {{20{1'b0}},imm};
	case(alu_op)
			4'b0000: rd_data = rs1_data + rs2_data;//add
			//4'b0001: rd_data = rs1_data + sign_extended;//addi

			4'b0010: rd_data = rs1_data - rs2_data;//sub
			4'b0011: rd_data = rs1_data ^ rs2_data;//xor
			4'b0100: rd_data = rs1_data | rs2_data;//or
			4'b0101: rds_data = rs1_data & rs2_data;//and
			
			//5'b00110:  rd_data = rs1_data ^ sign_extended;//xor with extended imm
			//5'b00111:  rd_data = rs1_data | sign_extended;//or with extended imm
			//5'b01000:  rd_data = rs1_data & sign_extended;//and with extended imm
			
			4'b0110:  rd_data = rs1_data << rs2_data;//shift left logical sll
			4'b0111:  rd_data = rs1_data >> rs2_data;//right shift logical 
			4'b1000:  rd_data = $signed(rs1_data) >>> rs2_data;//shift right arithmetic
			
			//5'b01100:  rd_data = rs1_data << sign_extended;//slli
			//5'b01101:  rd_data = rs1_data >> sign_extended;//srli
			//5'b01110:  rd_data = $signed(rs1_data) >>> sign_extended;//shift right arithmetic imm
			
			4'b1001:  rd_data = ($signed(rs1_data) < $signed(rs2_data)) ? 1'b1 : 1'b0 ;//slt (set less than)
			//5'b10000:  rd_data = ($signed(rs1_data) < $signed(sign_extended)) ? 1'b1 : 1'b0 ;//slti (set less than imm)
			4'b1010:  rd_data = (rs1_data <  rs2_data) ? 1'b1 : 1'b0 ;//set less than usigned
			//5'b10010:  rd_data = (rs1_data < sign_extended) ? 1'b1 : 1'b0 ;//set less than imm unsigned 
 			//5'b10010: rd_data = ($unsigned(rs1_data) < $unsigned({{20{imm[11]}},imm}))? 32'b1:32'b0; // sltiu

	endcase
end 
endmodule
